
(Core-MLの構文)

 τ ::= t | β | τ -> τ     --- 単相型
 σ ::= τ|∀t.σ             --- 型スキーマ
 M,N ::= c                    --- 項
       | x
       | M N
       | \x.M
       | let x = M in E

(Core-XMLの構文)

 τ ::= t | β | τ -> τ     --- 単相型
 σ ::= τ|Πt.σ             --- 型スキーマ
 E,F ::= c                    --- 項
       | x
       | E F
       | \x:τ.E
       | E <τ>
       | \<t>.E
       | let x:σ = E in F

(Core-MLからCore-XMLへの変換規則)

Γ |- M ⇒ E: σ

      x:σ∈Γ
-------------------                                (VAR)
 Γ |- x ⇒ x : σ

     Γ |- M ⇒ E : σ     t∈FTV(σ)-FTV(Γ) 
----------------------------------------------     (TABS)
 Γ |- M ⇒ \<t>.E : Πt.σ

     Γ |- M ⇒ E : Πt.σ
-------------------------------                    (TAPP)
 Γ |- M ⇒ E <τ> : σ[t:=τ]

    Γ{x:τ} |- M ⇒ E : τ'
---------------------------------                  (ABS)
 Γ |- \x.M ⇒ \x:τ.E : τ->τ'

 Γ |- M ⇒ E : τ->τ'  Γ |- N ⇒ F : τ
-------------------------------------------        (APP)
        Γ |- M N ⇒ E F : τ'

   Γ |- M ⇒ E : σ  Γ{x:σ} |- N ⇒ F : τ
-------------------------------------------------  (LET)
 Γ |- let x = M in N ⇒ let x:σ = E in F : τ

Core-MLからCore-XMLへの変換例：
let id = \x.x in id id
=>
let id:Πt.t->t = \<t>.\x:t.x in id <X->X> (id <X>)

    ※ 変換例は R.Harper, J.C.Mithcell, "On the Type Structure of
    Standard ML", 1993.にもとづく（少し改変）

(Core-XMLの型レベル評価)

評価文脈:
C ::= []
    | E C | C F
    | let x:σ = C in F
    | \x:τ.C

簡約規則: E→F,θ                          // θは変数の置換
- (\<t>.E) <τ> → E[t:=τ],id
- let x:Πt.σ = V in F → F[x:=V],id      // Vは簡約基を含まないCore-XML項

   E→F,θ
--------------
 C[E]⇒θC[F]

*⇒は⇒の推移反射閉包(transitive-reflective-closure)

let id:Πt.t->t = \<t>.\x:t.x in id <X->X> (id <X>)
=>
(\<t>.\x:t.x) <X->X> ((\<t>.\x:t.x) <X>)
=>
\x:<X->X>.x) (\x:<X>.x)

 Γ |- M ⇒ E : σ、かつ、E*⇒F,θ
-----------------------------------
          M ---> V : θτ
あるいは [[M]]ρ ≠ wrong

あいまいさは？

M ---> wrong

型レベルで評価したものは、そのまま実行しない
M⇒E; E→F,θ

θEを実行する(副作用が問題になる場合)


****************


def if = \b.\\t1.\\t2.case b of true -> t1 | false -> t2;
def hd = \ls.case ls of cons -> \x.\_.x;
def is_nil = \ls.case ls of nil -> true | cons -> \_.\_.false;

def f = let r = ref {} in \_.!r;
def id = \x.let r = ref x in !r;

def evil = \f.
  let r = ref {} in \x.
    let y = !r in let _ = := r {f x} in
      if (is_nil y) (hd (!r)) (hd y);

def evil_id = evil (\x.x);

def evil_id' = (\f.
  let r = ref {} in \x.
    let y = !r in let _ = := r {f x} in
      if (is_nil y) (hd (!r)) (hd y)) (\x.x)

---> rがクロージャに閉じ込められる
  => 同じになるはず
def r0 = !(ref {});
def r1 = ref {}; 
def r2 = let r = ref {} in r;
def r3 = let r = ref {} in !r;

letの中でrが返り値になっていたら、それは、-1
 
(\<t0>.(\<t1>.(\<t2>.
(\f':(t0(2) -> t1(1)).
  (let r:(<t0'> => (Ref (List t0'(0))))
   = (\<t0'>.(((ref <(List t0'(0))>) <*>) (nil <t0'(0)>)))
  in (\x:t0(4).
    (let y:(<t0'> => (List t0'(0))) =
       (\<t0'>.((! <(List t0'(0))>) (r(2) <t0'(0)>)))
    in
    (let _ :(List t1(5)) = (((:= <(List t1(5))>) (r(2) <t1(5)>)) (((cons <t1(5)>) (f'(3) x(1))) (nil <t1(5)>)))
     in ((((if(12) <t2(5)>) ((is_nil(10) <X57(rank:0)>) (y(1) <X57(rank:0)>))) ((hd(11) <t2(5)>) ((! <(List t2(5))>) (r(3) <t2(5)>)))) ((hd(11) <t2(5)>) (y(1) <t2(5)>))))
)
)
)
)
)))


"Syntactic approach to type soundness"

Subject reductionを使って証明する

TODO

let x = [] : 'a list in
  let f = 

(fun f x -> let g = f in g [0]) (fun x -> true :: x)
                                ^^^^^^^^^^^^^^^^^^^^ list bool -> list bool

def f = \x.let r = ref x in !r;

let f = ref (\x.x)
let f = \<t>.ref <X> <t->t> (\x:t.x)
let f = \<t>.m0 <X> <t->t> : <t>=>Ref <t->t>

大域変数と局所変数
let

let f = ref 0 in
    

[core-ML]
型τ
  τ ::= t | β | τ -> τ
型スキーマσ
  σ ::= τ|∀t.σ

項M,N
M,N ::=
      | x
      | M N
      | \x.M
      | let x = M in E
      | fix \x.M

[core-XML]

型τ
  τ ::= t | β | τ -> τ
型スキーマσ
  σ ::= τ|Πt.σ

M,N ::=
      | x
      | M N
      | \x:τ.M
      | M<τ>
      | \<t>.M
      | let x:σ = M in N

(\<t>.M) <τ> → M[t:=τ]
let x:Πt.σ = M in N → N[x:=M]

C ::= [] | M C | C N
    | \x:τ.C
    | C<τ>
    | let x:σ = C in N
    
[core-XML+record]
τ ::=
      | { l1:τ1;...;ln:τn }
M,N ::=
      | { l1=M1;...;ln=Mn }
      | #l


型推論

Γ |- #l ⇒ #l <X1> <X2> : X2->X1 where X1,X2 is fresh type variable

    Γ |- Mi ⇒ Mi' : τi    τi ≦ τ
-----------------------------------------------
Γ |- over τ of M1 |...| Mn ⇒
       over τ of τ1=>M1' |...| τn=>Mn' : τ


[型レベル評価]

C[M]→θC[M']

M→M',θ

(\<t>.M) <τ> → M[t:=τ],id
let x:Πt.σ = M in N → N[x:=M],id

#l <τ1> <{...;l:τ;...}> → #l,θ where θ=unify(τ,τ1)

over τ of τ'=>M → M,θ where θ=unify(τ,τ')
over τ of τ1=>M1|...|τn=>Mn 
→ over τ of τj=>Mj|...|τk=>Mk,id    1≦j≦i≦k≦n,unify(τ,τi),それ以外はfail





(over t->t->t of (+) | (+.)) 3 : Int -> Int
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

let print =
  fix \print_.\x.
    (over t -> unit of
        | print_int
        | print_float
        | print_string
        | \xs.case xs of
                nil   -> print_string "[]"
              | x::xs -> print_ x; print_ xs)

型エラーになるはず
> #l {l = #l} (#l {l = 0})
#l <X1->X2> <{l:X1->X2}> {l = #l <X2> <X1>} (#l <X1> <{l:Int}>) {l = 0}
    ^^^                               Int       Int
    Int

(#l {l = #l}) (#l {l = 0})
^^^^^^^^^^^^^
#l (#l {l = 0})
   ^^^^^^^^^^^^      

#l 0


tupleのgeneralizeは個別に行う


let p = \<t0>.\x:t0.x,\<t1>.\x:t1.x      p:<t0>=><t1>=>(t0->t0,t1->t1)
                                         p:(<t0>=>t0->t0,<t1>=>t1->t1)

(\x,y.E) p
let x,y = p : <t0>=>t0->t0,<t1>=>t1->t1
let x = \<t0>.\<t1>.#0 (p <t0> <t1>) in
let y = \<t0>.\<t1>.#1 (p <t0> <t1>)
=>
let p = p in
let x = fst p in
let y = snd p 

[(\x,y.x) p]
=>
(\p.(\x.(\y.x) (snd p)) (fst p)) p

let x,y,z = p
let x,(y,z)


def id = \x.x;
=> \<t>.\x:t.x   : <t> => t -> t
--
id;
id <X>
=> \x:X.x
\<t>.id <t>

型式
k T T ...
T -> T

(T)


[動的型]

Int
Dtyp->Int
tcase (typeof x) of
  Int -> ...
* ... -> 


(t*t)

snd (t1,t2) -> t2
snd (t1,(t2,t3)) -> t2

let f = (1,2)
let x = fst f

a = { l:b }
r1 ::{ l1:b1; ... }
r2 ::{ l2:b2; ... }

r1

[組型]

  E1,...,En : T1,...,Tn

let b1,...,bn = E in E
    \b1,...,bn.E    : (T1,...,Tn) -> T

t1,t2,t3 = t1,(t2,t3)

let t1,t2,...

組型のオプション引数
\x,y,z ... .
fun (x,y,z...) ->
         ^^^^
     x,y,z,...

\x,y,z ...
<t>=>(t...)-> unit | 

tcase t of
    unit => 0
  | ,    => \<a>.\<b>.
  | ...  => \<t>
           z () | 

(a,b) -> a
, a (, b c) -->
, a b

(a,b)

cons a b

pair a b = Pair a b


 k T T
T,...,T
 T->T
pair a b = a,b

over add = \<t>.over t->t->t of (+) | (+.) | (^)

def double = \<t>.\x.add <t> x x

double <Int> 3

double (add <Int>) 3

add : \/t::[Int,Real,String].t -> t -> t
double : \/t::[Int,Real,String].t -> t

def evenodd =
    fix (\\eo.cons (\n.if (== n 0) true  (#1 eo (isub_ n 1)))
                   (\n.if (== n 0) false (#2 eo (isub_ n 1))))


変換する

[let x,y = E]
  ==> let xds,y = (\x:t0.x,\x:t1.x) : <t0>=><t1>=>T'  T'をx,yに分解する

fix (\f,g.E) -> (\f.E) (fix \f.E)
fst v


興味深い例：
(\x.over a of x | 1.0)
(\x.over a of x | 1.0) 0

iadd_ ((\x.over a of x 3 | 1.0) (\x.x))
(\x.over a of x | 1.0) (\x.x) 3

(over a of #l | 1.0) {l = 3}
(over a of (\x.x) #l | 1.0) {l = 3}
(over a of (\x.#l x) | 1.0) {l = 3}

(\x.x) (over a of (\x.x) #l (#m {m = {l = #l}}) | 1.0) {l = 3}

(\x.x) #l (over a of (\x.x) #l (#m {m={l={l=3}}}) | 1.0)

#l (over a of (\x.x) #l (#m {m={l={l=3}}}) | 1.0)
   ---> error!になる

#l (over a of {l = 3} | 1);
   ---> error!になる

(\y.over a of (\x.x) #l (#m {m = {l = y}}) | 1.0)
(\y.over a of (\x.x) #l (#m {m = {l = y}}) | 1.0) 3


****************

[1] L.Damas & R.Milner, "Principal type schemes for functional
programs", POPL 1982.

[2] R.Milner, "A theory of type polymorphism in programming",
J.Comp.Sys.Sci,Vol.17(3),1978.

[3] S.Kaes, "Type inference in the presence of overloading, subtyping
and recursive types", ACM LISP&F.P.,1992.

[4] S.R.Thatte, "Semantics of type classes revisited", LISP94, 1994.

[5] J.C.Mitchell & R. Harper, "The essence of ML", POPL93, 1993.

[6] M.Odersky,P.Wadler,M.Wehr, "A second look at overloading", FPCA95,
1995.

[7] P.Wadler&S.Blott, "How to make ad-hoc polymorphism less ad-hoc",
POPL89, 1989.

[8] A.Ohori, "A polymorphic record calculus and its compilation", ACM
Trans.prog.lang.sys., Vol.17(6), 1995.

[9] D.Remy, "Type inference for records in a natural extension of ML",
Theor.Asp.OOP, 97-96, MIT Press, 1994.
